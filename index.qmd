---
title: "Météo Montpellier"
---
```{python}
#| code-fold: true
#| code-summary: "Dérouler le code"
import numpy as np
import matplotlib.pyplot as plt
import requests
import datetime
import pooch
from dateutil.relativedelta import relativedelta
start_date = datetime.datetime.now() - relativedelta(days=3)
end_date = start_date + relativedelta(days=6)

debut=""
if (start_date.month <10 and start_date.day <10):
    debut = f"{start_date.year}-0{start_date.month}-0{start_date.day}"
elif start_date.day <10:
    debut = f"{start_date.year}-{start_date.month}-0{start_date.day}"
elif start_date.month <10:
    debut = f"{start_date.year}-0{start_date.month}-{start_date.day}"
else:
    debut = f"{start_date.year}-{start_date.month}-{start_date.day}"


print(debut)
fin=""
if (end_date.month <10 and end_date.day <10):
    fin = f"{end_date.year}-0{end_date.month}-0{end_date.day}"
elif end_date.day <10:
    fin = f"{end_date.year}-{end_date.month}-0{end_date.day}"
elif start_date.month <10:
    fin = f"{end_date.year}-0{end_date.month}-{end_date.day}"
else:
    fin = f"{end_date.year}-{end_date.month}-{end_date.day}"

print(fin)
url = f"https://api.open-meteo.com/v1/meteofrance?latitude=43.6&longitude=3.8833&hourly=temperature_2m,relativehumidity_2m,apparent_temperature,precipitation,rain,snowfall,windspeed_10m,windspeed_20m,temperature_20m&start_date={debut}&end_date={fin}"


response = requests.get(url)
data = response.json()
print(data)
degres=data['hourly']['temperature_2m']
ressenti=data['hourly']['apparent_temperature']
humidite=data['hourly']['relativehumidity_2m']
pluie=data['hourly']['precipitation']
neige=data['hourly']['snowfall']
vent=data['hourly']['windspeed_10m']

print(len(degres))
tabdegres = np.zeros((7,24))
k=0
for i in range(7):
    for j in range(24):
        tabdegres[i,j]= degres[k]
        k+=1
mintemp=np.zeros(7)
maxtemp=np.zeros(7)
for i in range(7):
    mintemp[i]=min(tabdegres[i])
    maxtemp[i]=max(tabdegres[i])

def inttoday(i):
    if ((datetime.datetime.now().weekday() + i)%7 ==0):
        return 'Lundi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==1):
        return 'Mardi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==2):
        return 'Mercredi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==3):
        return 'Jeudi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==4):
        return 'Vendredi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==5):
        return 'Samedi'
    else:
        return 'Dimanche'
#| label: tbl-planets
#| tbl-cap: Astronomical object

from IPython.display import Markdown
from tabulate import tabulate
table = [[mintemp[0],mintemp[1],mintemp[2],mintemp[3],mintemp[4],mintemp[5],mintemp[6]],
         [maxtemp[0],maxtemp[1],maxtemp[2],maxtemp[3],maxtemp[4],maxtemp[5],maxtemp[6]],
         [0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0]]
Markdown(tabulate(
  table, 
  headers=[inttoday(-2),"Hier","Aujourd'hui","Demain",inttoday(2),inttoday(3),inttoday(4)]
))

```
| Default | Left | Right | Center |
|---------|:-----|------:|:------:|
| tabdegres[i][1]      | 12   |    12 |   12   |
| 123     | 123  |   123 |  123   |
| 1       | 1    |     1 |   1    |

: Demonstration of pipe table syntax