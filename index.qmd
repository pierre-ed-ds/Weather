---
title: "Météo Montpellier"
---
```{python}
#| column: page
#| code-fold: true
#| code-summary: "Dérouler le code"
import numpy as np
import matplotlib.pyplot as plt
import requests
import datetime
import pooch
import PIL as Image
import statistics
from dateutil.relativedelta import relativedelta

# initialisation des dates de debut et fin d'extraction de données
start_date = datetime.datetime.now() - relativedelta(days=2)
end_date = start_date + relativedelta(days=6)
# formatage des dates pour importer le bon URL
debut = ""
if start_date.month < 10 and start_date.day < 10:
    debut = f"{start_date.year}-0{start_date.month}-0{start_date.day}"
elif start_date.day < 10:
    debut = f"{start_date.year}-{start_date.month}-0{start_date.day}"
elif start_date.month < 10:
    debut = f"{start_date.year}-0{start_date.month}-{start_date.day}"
else:
    debut = f"{start_date.year}-{start_date.month}-{start_date.day}"


fin = ""
if end_date.month < 10 and end_date.day < 10:
    fin = f"{end_date.year}-0{end_date.month}-0{end_date.day}"
elif end_date.day < 10:
    fin = f"{end_date.year}-{end_date.month}-0{end_date.day}"
elif start_date.month < 10:
    fin = f"{end_date.year}-0{end_date.month}-{end_date.day}"
else:
    fin = f"{end_date.year}-{end_date.month}-{end_date.day}"

# copie de l'URL du site open-meteo avec les differents critères qui nous interessent
url = f"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&hourly=temperature_2m,weathercode,precipitation,windspeed_10m&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum&timezone=Europe%2FLondon&start_date={debut}&end_date={fin}"

# récuperation des données
response = requests.get(url)
data = response.json()

# initialisation des tableaux de données que nous allons utiliser
degres = data["hourly"]["temperature_2m"]
sumpluie = data["daily"]["precipitation_sum"]
vent = data["hourly"]["windspeed_10m"]
codeimage = data["hourly"]["weathercode"]
codeimagetot = data["daily"]["weathercode"]
mintemp = data["daily"]["temperature_2m_min"]
maxtemp = data["daily"]["temperature_2m_max"]
pluie = data["hourly"]["precipitation"]


pluie5 = 0 #pour gérer les données pas encore enregistrées
for i in range(len(pluie)):
    if pluie[i] == None:
        pluie[i] = 0
for i in range(24):
    pluie5 += pluie[-24+i] #somme de la pluie des 24 heures du dernier jour

# vent moyen pour chaques jours
tabvent = np.zeros((7, 24))
moyvent = np.zeros(7)
k = 0
for i in range(7):
    for j in range(24):
        if vent[k] == None:
            tabvent[i, j] = tabvent[
                i, j - 1
            ]  # fausse le moins les résultats selon mes tests
        else:
            tabvent[i, j] = vent[k]
        k += 1

for i in range(7):
    moyvent[i] = round(
        statistics.mean(tabvent[i]), 0
    )  # on ne garde pas de chiffres après la virgule car vue générale



def inttoday(i):
    """
    fonction permettant d'obtenir le nom du jour des jours de la semaine automatiquement, correspond à la première ligne du tableau.
    """
    if (datetime.datetime.now().weekday() + i) % 7 == 0:
        return "Lundi"
    elif (datetime.datetime.now().weekday() + i) % 7 == 1:
        return "Mardi"
    elif (datetime.datetime.now().weekday() + i) % 7 == 2:
        return "Mercredi"
    elif (datetime.datetime.now().weekday() + i) % 7 == 3:
        return "Jeudi"
    elif (datetime.datetime.now().weekday() + i) % 7 == 4:
        return "Vendredi"
    elif (datetime.datetime.now().weekday() + i) % 7 == 5:
        return "Samedi"
    else:
        return "Dimanche"


def date(i):
    """
    Retourne une chaine de caractères correspondant au jour i, i étant l'offset de jour par rapport au présent.
    """
    date = datetime.datetime.now() + relativedelta(days=i)
    return f"{date.day}-{date.month}"


def imgcode(i):
    """
    Association de chaque code WBO à un pictogramme le correspondant. Retourne le chemin d'accès au pictogramme par une chaine de caractères. Version hourly.
    """
    if medcode[i] == 0:
        return "iconsmeteo/Sun-thin.svg"
    elif medcode[i] == 1 or medcode[i] == 2:
        return "iconsmeteo/PartlySunny-thin.svg"
    elif medcode[i] == 3:
        return "iconsmeteo/Cloud-thin.svg"
    elif 45 <= medcode[i] <= 57:
        return "iconsmeteo/Haze-thin.svg"
    elif 61 <= medcode[i] <= 67 or 80 <= medcode[i] <= 82:
        return "iconsmeteo/Rain-thin.svg"
    elif 71 <= medcode[i] <= 77 or 85 <= medcode[i] <= 86:
        return "iconsmeteo/Snow-thin.svg"
    elif 95 <= medcode[i] <= 99:
        return "iconsmeteo/Storm-thin.svg"


def imgcodeday(i):
    """
    Association de chaques codes WBO à un pictogramme le correspondant. Retourne le chemin d'accès au pictogramme par une chaine de caractères. Version daily.
    """
    match codeimagetot[i]:
        case 0:
            return "iconsmeteo/wi-day-sunny.svg"
        case 1:
            return "iconsmeteo/wi-day-sunny-overcast.svg"
        case 2:
            return "iconsmeteo/wi-day-cloudy.svg"
        case 3:
            return "iconsmeteo/wi-cloud.svg"
        case 45 | 48:
            return "iconsmeteo/wi-fog.svg"
        case 51 | 53 | 55 | 56 | 57:
            return "iconsmeteo/wi-sprinkle.svg"
        case 61 | 81 | 82:
            return "iconsmeteo/wi-showers.svg"
        case 63:
            return "iconsmeteo/wi-rain-wind.svg"
        case 65 | 66 | 67:
            return "iconsmeteo/wi-rain.svg"
        case 71 | 73 | 75 | 85 | 86:
            return "iconsmeteo/wi-snow.svg"
        case 95 | 96:
            return "iconsmeteo/wi-storm-showers.svg"
        case 99:
            return "iconsmeteo/wi-thunderstorm.svg"
        case _:  # si on a pas encore d'informations j'ai juste mis un cercle
            return "iconsmeteo/wi-moon-new.svg"


def couleur(temp):
    """
    Associe une couleur en fonction de la température sous le format RGB.
    """
    if temp <= 0:
        return "rgb(102, 183, 213,0.5)"
    if 0 < temp <= 5:
        return "rgb(85, 215, 195,0.5)"
    if 5 < temp <= 10:
        return "rgb(65, 220, 119,0.5)"
    if 10 < temp <= 15:
        return "rgb(82, 226, 38,0.5)"
    if 15 < temp <= 20:
        return "rgb(155, 227, 22,0.5)"
    if 20 < temp <= 25:
        return "rgb(216, 186, 12,0.5)"
    if 25 < temp <= 30:
        return "rgb(211, 113, 7,0.5)"
    if 30 < temp <= 35:
        return "rgb(204, 61, 4,0.5)"
    if 35 < temp:
        return "rgb(201, 25, 2,0.5)"
    else:
        return "rgb(188, 212,204,0.5)"


def goutte(i):
    """
    Retourne une image sous format html correspondant a l'intensité des précipitations.
    """
    if sumpluie[i] != float:
        return ""
    if 0 < sumpluie[i] <= 2:
        return '<img src="iconsmeteo/wi-raindrop.svg" width="20" height="20" />'
    elif 2 < sumpluie[i]:
        return '<img src="iconsmeteo/wi-raindrops.svg" width="40" height="40" />'
    else:
        return ""

from IPython.display import HTML
from tabulate import tabulate

# création du tableau en HTML pour pouvoir mettre les images et des couleurs
res = f"""
<table class= "table1-style">
    <thead>
    <tr>  
        <th  style="border-top-left-radius : 20px 20px"> Jours </th>
        <th>  {inttoday(-2)} <br> <small> {date(-2)} </small></th>
        <th>  Hier <br> <small>{date(-1)}</small></th>
        <th style="border-top:3px solid rgb(85, 215, 195,0.5);border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)">   <a class=lien href = plus.qmd style="text-decoration:none"> Aujourd'hui <br> <small>{date(0)}</small> </a></th>
        <th>  Demain <br> <small>{date(1)}</small></th>
        <th>  {inttoday(2)} <br> <small>{date(2)}</small></th>
        <th>  {inttoday(3)} <br> <small>{date(3)}</small></th>
        <th  style="border-top-right-radius : 20px 20px" >  {inttoday(4)} <br> <small>{date(4)}</small></th>
    </tr>
    </thead>
    <tbody>
    <tr> 
        <td>  Pictogramme</td>
        <td> <img src={imgcodeday(0)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(1)} width="50"
  height="50" /> </td>
        <td style="border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)"> <img src={imgcodeday(2)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(3)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(4)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(5)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(6)} width="50"
  height="50" /> </td>
    </tr>
    <tr> 
        <td>  Température maximale</td>
        <td style =" background-color : {couleur(maxtemp[0])}; font-weight: bold;" > {maxtemp[0]}°C </td>
        <td style =" background-color : {couleur(maxtemp[1])};font-weight: bold;" > {maxtemp[1]}°C </td>
        <td style =" background-color : {couleur(maxtemp[2])};font-weight: bold;border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)" > {maxtemp[2]}°C </td>
        <td style =" background-color : {couleur(maxtemp[3])};font-weight: bold;" > {maxtemp[3]}°C </td>
        <td style =" background-color : {couleur(maxtemp[4])};font-weight: bold;" > {maxtemp[4]}°C </td>
        <td style =" background-color : {couleur(maxtemp[5])};font-weight: bold;" > {maxtemp[5]}°C </td>
        <td style =" background-color : {couleur(maxtemp[6])};font-weight: bold;" > {maxtemp[6]}°C </td>
    </tr>
    <tr > 
        <td>  Température minimale</td>
        <td style =" background-color : {couleur(mintemp[0])};font-weight: bold;" > {mintemp[0]}°C </td>
        <td style =" background-color : {couleur(mintemp[1])};font-weight: bold;" > {mintemp[1]}°C </td>
        <td style =" background-color : {couleur(mintemp[2])};font-weight: bold;border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)" > {mintemp[2]}°C </td>
        <td style =" background-color : {couleur(mintemp[3])};font-weight: bold;" > {mintemp[3]}°C </td>
        <td style =" background-color : {couleur(mintemp[4])};font-weight: bold;" > {mintemp[4]}°C </td>
        <td style =" background-color : {couleur(mintemp[5])};font-weight: bold;" > {mintemp[5]}°C </td>
        <td style =" background-color : {couleur(mintemp[6])};font-weight: bold;" > {mintemp[6]}°C </td>
    </tr>
    <tr> 
        <td> Vitesse moyenne du vent </td>
        <td> {int(moyvent[0])}km/h </td>
        <td> {int(moyvent[1])}km/h </td>
        <td style="border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)"> {int(moyvent[2])}km/h </td>
        <td> {int(moyvent[3])} km/h </td>
        <td> {int(moyvent[4])} km/h </td>
        <td> {int(moyvent[5])} km/h </td>
        <td> {(moyvent[6])} km/h </td>
    </tr>
    <tr> 
        <td style="border-bottom-left-radius : 20px 20px"> Précipitations </td>
        <td> {goutte(0)} {sumpluie[0]}mm </td>
        <td> {goutte(1)} {sumpluie[1]}mm </td>
        <td style="border-bottom:3px solid rgb(85, 215, 195,0.5);border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)"> {goutte(2)} {sumpluie[2]}mm </td>
        <td> {goutte(3)} {sumpluie[3]}mm </td>
        <td> {goutte(4)} {sumpluie[4]}mm </td>
        <td> {goutte(5)} {sumpluie[5]}mm </td>
        <td style="border-bottom-right-radius : 20px 20px"> {goutte(6)} {pluie5}mm </td>
    </tr>
    </tbody>

</table>
"""
HTML(res)
```