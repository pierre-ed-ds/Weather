---
title: "Météo Montpellier"
---
```{python}
#| code-fold: true
#| code-summary: "Dérouler le code"
import numpy as np
import matplotlib.pyplot as plt
import requests
import datetime
import pooch
import PIL as Image
import statistics
from dateutil.relativedelta import relativedelta
start_date = datetime.datetime.now() - relativedelta(days=3)
end_date = start_date + relativedelta(days=6)

debut=""
if (start_date.month <10 and start_date.day <10):
    debut = f"{start_date.year}-0{start_date.month}-0{start_date.day}"
elif start_date.day <10:
    debut = f"{start_date.year}-{start_date.month}-0{start_date.day}"
elif start_date.month <10:
    debut = f"{start_date.year}-0{start_date.month}-{start_date.day}"
else:
    debut = f"{start_date.year}-{start_date.month}-{start_date.day}"


fin=""
if (end_date.month <10 and end_date.day <10):
    fin = f"{end_date.year}-0{end_date.month}-0{end_date.day}"
elif end_date.day <10:
    fin = f"{end_date.year}-{end_date.month}-0{end_date.day}"
elif start_date.month <10:
    fin = f"{end_date.year}-0{end_date.month}-{end_date.day}"
else:
    fin = f"{end_date.year}-{end_date.month}-{end_date.day}"

url = f"https://api.open-meteo.com/v1/meteofrance?latitude=43.6&longitude=3.8833&hourly=temperature_2m,relativehumidity_2m,apparent_temperature,precipitation,rain,snowfall,weathercode,cloudcover,windspeed_10m,windspeed_20m,temperature_20m&daily=weathercode,uv_index_max&timezone=Europe%2FLondon&start_date={debut}&end_date={fin}"


response = requests.get(url)
data = response.json()
degres=data['hourly']['temperature_2m']
ressenti=data['hourly']['apparent_temperature']
humidite=data['hourly']['relativehumidity_2m']
pluie=data['hourly']['precipitation']
neige=data['hourly']['snowfall']
vent=data['hourly']['windspeed_10m']
codeimage=data['hourly']['weathercode']
codeimagetot=data['daily']['weathercode']



tabdegres = np.zeros((7,24))

k=0
for i in range(7):
    for j in range(24):
        tabdegres[i,j]= degres[k]
        k+=1
mintemp=np.zeros(7)
maxtemp=np.zeros(7)
for i in range(7):
    mintemp[i]=min(tabdegres[i])
    maxtemp[i]=max(tabdegres[i])

tabcode = np.zeros((7,24))
medcode=np.zeros(7)
k=0
for i in range(7):
    for j in range(24):
        tabcode[i,j]= codeimage[k]
        k+=1

for i in range(7): 
    medcode[i]=max(tabcode[i])
    #medcode[i]=statistics.median(tabcode[i])

tabvent = np.zeros((7,24))
maxvent = np.zeros(7)
k=0
for i in range(7):
    for j in range(24):
        tabvent[i,j]= vent[k]
        k+=1

for i in range(7): 
    maxvent[i]=max(tabvent[i])

tabpluie = np.zeros((7,24))
sumpluie = np.zeros(7)
k=0
for i in range(7):
    for j in range(24):
        tabpluie[i,j]= pluie[k]
        k+=1

for i in range(7): 
    sumpluie[i]=sum(tabpluie[i])

def inttoday(i):
    if ((datetime.datetime.now().weekday() + i)%7 ==0):
        return 'Lundi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==1):
        return 'Mardi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==2):
        return 'Mercredi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==3):
        return 'Jeudi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==4):
        return 'Vendredi'
    elif ((datetime.datetime.now().weekday()+i)%7 ==5):
        return 'Samedi'
    else:
        return 'Dimanche'

def date(i):
    date=datetime.datetime.now() + relativedelta(days=i)
    return f"{date.day}-{date.month}"
#| label: tbl-planets
#| tbl-cap: Astronomical object
def imgcode(i):
    if (medcode[i]==0):
        return 'iconsmeteo/Sun-thin.svg'
    elif (medcode[i]==1 or medcode[i]==2):
        return 'iconsmeteo/PartlySunny-thin.svg'
    elif (medcode[i]==3):
        return 'iconsmeteo/Cloud-thin.svg'
    elif (45<=medcode[i]<=57):
        return 'iconsmeteo/Haze-thin.svg'
    elif (61<=medcode[i]<=67 or 80<=medcode[i]<=82):
        return 'iconsmeteo/Rain-thin.svg'
    elif (71<=medcode[i]<=77 or 85<=medcode[i]<=86):
        return 'iconsmeteo/Snow-thin.svg'
    elif (95<=medcode[i]<=99):
        return 'iconsmeteo/Storm-thin.svg'


def imgcodeday(i):
    if (codeimagetot[i]==0):
        return 'iconsmeteo/Sun-thin.svg'
    elif (codeimagetot[i]==1 or codeimagetot[i]==2):
        return 'iconsmeteo/PartlySunny-thin.svg'
    elif (codeimagetot[i]==3):
        return 'iconsmeteo/Cloud-thin.svg'
    elif (45<=codeimagetot[i]<=57):
        return 'iconsmeteo/Haze-thin.svg'
    elif (61<=codeimagetot[i]<=67 or 80<=codeimagetot<=82):
        return 'iconsmeteo/Rain-thin.svg'
    elif (71<=codeimagetot<=77 or 85<=codeimagetot<=86):
        return 'iconsmeteo/Snow-thin.svg'
    elif (95<=codeimagetot<=99):
        return 'iconsmeteo/Storm-thin.svg'

def couleur(temp):
    if (temp<=0):
        return 'rgb(102, 183, 213,0.5)'
    if (0<temp<=5):
        return 'rgb(85, 215, 195,0.5)'
    if (5<temp<=10):
        return 'rgb(65, 220, 119,0.5)'
    if (10<temp<=15):
        return 'rgb(82, 226, 38,0.5)'
    if (15<temp<=20):
        return 'rgb(155, 227, 22,0.5)'
    if (20<temp<=25):
        return 'rgb(216, 186, 12,0.5)'
    if (25<temp<=30):
        return 'rgb(211, 113, 7,0.5)'
    if (30<temp<=35):
        return 'rgb(204, 61, 4,0.5)'
    if (35<temp):
        return 'rgb(201, 25, 2,0.5)'
from IPython.display import Markdown
from IPython.display import HTML
from tabulate import tabulate
res=f"""
<table class= "table1-style">
    <thead>
    <tr>  
        <th  style="border-top-left-radius : 20px 20px"> Jours </th>
        <th>  {inttoday(-2)} <br> <small> {date(-2)} </small></th>
        <th>  Hier <br> <small>{date(-1)}</small></th>
        <th style="border-top:3px solid rgb(85, 215, 195,0.5);border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)">  Aujourd'hui <br> <small>{date(0)}</small></th>
        <th>  Demain <br> <small>{date(1)}</small></th>
        <th>  {inttoday(2)} <br> <small>{date(2)}</small></th>
        <th>  {inttoday(3)} <br> <small>{date(3)}</small></th>
        <th  style="border-top-right-radius : 20px 20px" >  {inttoday(4)} <br> <small>{date(4)}</small></th>
    </tr>
    </thead>
    <tbody>
    <tr> 
        <td>  Pictogramme</td>
        <td> <img src={imgcodeday(0)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(1)} width="50"
  height="50" /> </td>
        <td style="border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)"> <img src={imgcodeday(2)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(3)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(4)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(5)} width="50"
  height="50" /> </td>
        <td> <img src={imgcodeday(6)} width="50"
  height="50" /> </td>
    </tr>
    <tr> 
        <td>  Température maximale</td>
        <td style =" background-color : {couleur(maxtemp[0])}; font-weight: bold;" > {maxtemp[0]}°C </td>
        <td style =" background-color : {couleur(maxtemp[1])};font-weight: bold;" > {maxtemp[1]}°C </td>
        <td style =" background-color : {couleur(maxtemp[2])};font-weight: bold;border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)" > {maxtemp[2]}°C </td>
        <td style =" background-color : {couleur(maxtemp[3])};font-weight: bold;" > {maxtemp[3]}°C </td>
        <td style =" background-color : {couleur(maxtemp[4])};font-weight: bold;" > {maxtemp[4]}°C </td>
        <td style =" background-color : {couleur(maxtemp[5])};font-weight: bold;" > {maxtemp[5]}°C </td>
        <td style =" background-color : {couleur(maxtemp[6])};font-weight: bold;" > {maxtemp[6]}°C </td>
    </tr>
    <tr > 
        <td>  Température minimale</td>
        <td style =" background-color : {couleur(mintemp[0])};font-weight: bold;" > {mintemp[0]}°C </td>
        <td style =" background-color : {couleur(mintemp[1])};font-weight: bold;" > {mintemp[1]}°C </td>
        <td style =" background-color : {couleur(mintemp[2])};font-weight: bold;border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)" > {mintemp[2]}°C </td>
        <td style =" background-color : {couleur(mintemp[3])};font-weight: bold;" > {mintemp[3]}°C </td>
        <td style =" background-color : {couleur(mintemp[4])};font-weight: bold;" > {mintemp[4]}°C </td>
        <td style =" background-color : {couleur(mintemp[5])};font-weight: bold;" > {mintemp[5]}°C </td>
        <td style =" background-color : {couleur(mintemp[6])};font-weight: bold;" > {mintemp[6]}°C </td>
    </tr>
    <tr> 
        <td> Vitesse de vent maximale </td>
        <td> {maxvent[0]}km/h </td>
        <td> {maxvent[1]}km/h </td>
        <td style="border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)"> {maxvent[2]}km/h </td>
        <td> {maxvent[3]}km/h </td>
        <td> {maxvent[4]}km/h </td>
        <td> {maxvent[5]}km/h </td>
        <td> {maxvent[6]}km/h </td>
    </tr>
    <tr> 
        <td style="border-bottom-left-radius : 20px 20px"> Précipitations </td>
        <td> {sumpluie[0]}mm </td>
        <td> {sumpluie[1]}mm </td>
        <td style="border-bottom:3px solid rgb(85, 215, 195,0.5);border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)"> {sumpluie[2]}mm </td>
        <td> {sumpluie[3]}mm </td>
        <td> {sumpluie[4]}mm </td>
        <td> {sumpluie[5]}mm </td>
        <td style="border-bottom-right-radius : 20px 20px"> {sumpluie[6]}mm </td>
    </tr>
    </tbody>

</table>
"""
display(HTML(res))
```