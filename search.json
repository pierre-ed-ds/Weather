[
  {
    "objectID": "plus.html",
    "href": "plus.html",
    "title": "Météo détaillée du jour",
    "section": "",
    "text": "Dérouler le code\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport requests\nimport datetime\nimport pooch\nimport PIL as Image\nimport statistics\nfrom dateutil.relativedelta import relativedelta\n\ndef inttoday(i):\n    '''\n    fonction permettant d'obtenir le nom du jour des jours de la semaines automatiquement, correspond à la première ligne du tableau.\n    '''\n    if ((datetime.datetime.now().weekday() + i)%7 ==0):\n        return 'Lundi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==1):\n        return 'Mardi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==2):\n        return 'Mercredi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==3):\n        return 'Jeudi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==4):\n        return 'Vendredi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==5):\n        return 'Samedi'\n    else:\n        return 'Dimanche'\n\ndef date(i):\n    '''\n    Retourne une chaine de caractères correspondant au jour i, i étant l'offset de jour par rapport au présent.\n    '''\n    date=datetime.datetime.now() + relativedelta(days=i)\n    return f\"{date.day}-{date.month}\"\n\n#copie de l'URL du site open-meteo avec les differents critères qui nous interessent\nurl = f\"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&hourly=temperature_2m,relativehumidity_2m,apparent_temperature,precipitation,rain,snowfall,weathercode,cloudcover,windspeed_10m,windspeed_20m,temperature_20m&timezone=Europe%2FLondon&forecast_days=1\"\n\n#récuperation des données\nresponse = requests.get(url)\ndata = response.json()\n\n#initialisation des tableaux de données que nous allons utiliser\ndegres=data['hourly']['temperature_2m']\nressenti=data['hourly']['apparent_temperature']\nhumidite=data['hourly']['relativehumidity_2m']\npluie=data['hourly']['precipitation']\nneige=data['hourly']['snowfall']\nvent=data['hourly']['windspeed_10m']\ncodeimage=data['hourly']['weathercode']\n\ndef date(i):\n    '''\n    Retourne une chaine de caractères correspondant au jour i, i étant l'offset de jour par rapport au présent.\n    '''\n    date=datetime.datetime.now() + relativedelta(days=i)\n    return f\"{date.day}-{date.month}\"\n\n\ndef imgcodehour(i):\n    '''\n    Association de chaques codes WBO à un pictogramme le correspondant. Retourne le chemin d'accès au pictogramme par une chaine de caractères. Version day.\n    '''\n    match codeimage[i]:\n        case 0:\n            return 'iconsmeteo/wi-day-sunny.svg'\n        case 1:\n            return 'iconsmeteo/wi-day-sunny-overcast.svg'\n        case 2:\n            return 'iconsmeteo/wi-day-cloudy.svg'\n        case 3:\n            return 'iconsmeteo/wi-cloud.svg'\n        case 45|48:\n            return 'iconsmeteo/wi-fog.svg'\n        case 51 | 53 | 55 | 56 | 57:\n            return 'iconsmeteo/wi-sprinkle.svg'\n        case 61 | 81 | 82:\n            return 'iconsmeteo/wi-showers.svg'\n        case 63:\n            return 'iconsmeteo/wi-rain-wind.svg'\n        case 65 | 66 | 67:\n            return 'iconsmeteo/wi-rain.svg'\n        case 71 | 73 | 75 | 85 | 86:\n            return 'iconsmeteo/wi-snow.svg'\n        case 95 | 96:\n            return 'iconsmeteo/wi-storm-showers.svg'\n        case 99:\n            return 'iconsmeteo/wi-thunderstorm.svg'\ndef imgcodehournight(i):\n    '''\n    Association de chaques codes WBO à un pictogramme le correspondant. Retourne le chemin d'accès au pictogramme par une chaine de caractères. Version nuit.\n    '''\n    match codeimage[i]:\n        case 0:\n            return 'iconsmeteo/wi-night-clear.svg'\n        case 1|2:\n            return 'iconsmeteo/wi-night-alt-cloudy.svg'\n        case 3:\n            return 'iconsmeteo/wi-cloud.svg'\n        case 45|48:\n            return 'iconsmeteo/wi-fog.svg'\n        case 51 | 53 | 55 | 56 | 57:\n            return 'iconsmeteo/wi-sprinkle.svg'\n        case 61 | 81 | 82:\n            return 'iconsmeteo/wi-showers.svg'\n        case 63:\n            return 'iconsmeteo/wi-rain-wind.svg'\n        case 65 | 66 | 67:\n            return 'iconsmeteo/wi-rain.svg'\n        case 71 | 73 | 75 | 85 | 86:\n            return 'iconsmeteo/wi-snow.svg'\n        case 95 | 96:\n            return 'iconsmeteo/wi-storm-showers.svg'\n        case 99:\n            return 'iconsmeteo/wi-thunderstorm.svg'\n\ndef couleur(temp):\n    '''\n    Associe une couleur en fonction de la température sous le format RGB.\n    '''\n    if (temp&lt;=0):\n        return 'rgb(102, 183, 213,0.5)'\n    if (0&lt;temp&lt;=5):\n        return 'rgb(85, 215, 195,0.5)'\n    if (5&lt;temp&lt;=10):\n        return 'rgb(65, 220, 119,0.5)'\n    if (10&lt;temp&lt;=15):\n        return 'rgb(82, 226, 38,0.5)'\n    if (15&lt;temp&lt;=20):\n        return 'rgb(155, 227, 22,0.5)'\n    if (20&lt;temp&lt;=25):\n        return 'rgb(216, 186, 12,0.5)'\n    if (25&lt;temp&lt;=30):\n        return 'rgb(211, 113, 7,0.5)'\n    if (30&lt;temp&lt;=35):\n        return 'rgb(204, 61, 4,0.5)'\n    if (35&lt;temp):\n        return 'rgb(201, 25, 2,0.5)'\n\ndef goutte(i):\n    '''\n    Retourne une image sous format html correspondant a l'intensité des précipitations.\n    '''\n    if 0 &lt; pluie[i] &lt; 0.5:\n        return '&lt;img src=\"iconsmeteo/wi-raindrop.svg\" width=\"15\" height=\"15\" /&gt; &lt;br&gt;' \n    elif 0.5 &lt;= pluie[i]:\n        return '&lt;img src=\"iconsmeteo/wi-raindrops.svg\" width=\"25\" height=\"25\" /&gt; &lt;br&gt;' \n    else :\n        return ' - &lt;br&gt;'\n\nfrom IPython.display import Markdown\nfrom IPython.display import HTML\nfrom tabulate import tabulate\n\n\n#création du tableau en HTML pour pouvoir mettre les images et des couleurs\nres=f\"\"\"\n&lt;table class= \"table1-style\"&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;  \n        &lt;th  style=\"border-top-left-radius : 20px 20px\"&gt; {inttoday(0)} {date(0)} &lt;br&gt; &lt;a href = index.qmd style=\"text-decoration:none\"&gt;  &lt; &lt;/a&gt; Heures &lt;/th&gt;\n        &lt;th&gt;  00:00 &lt;/th&gt;\n        &lt;th&gt;  01:00 &lt;/th&gt;\n        &lt;th&gt;  02:00 &lt;/th&gt;\n        &lt;th&gt;  03:00 &lt;/th&gt;\n        &lt;th&gt;  04:00 &lt;/th&gt;\n        &lt;th&gt;  05:00 &lt;/th&gt;\n        &lt;th&gt;  06:00 &lt;/th&gt;\n        &lt;th&gt;  07:00 &lt;/th&gt;\n        &lt;th&gt;  08:00 &lt;/th&gt;\n        &lt;th&gt;  09:00 &lt;/th&gt;\n        &lt;th&gt;  10:00 &lt;/th&gt;\n        &lt;th&gt;  11:00 &lt;/th&gt;\n        &lt;th&gt;  12:00 &lt;/th&gt;\n        &lt;th&gt;  13:00 &lt;/th&gt;\n        &lt;th&gt;  14:00 &lt;/th&gt;\n        &lt;th&gt;  15:00 &lt;/th&gt;\n        &lt;th&gt;  16:00 &lt;/th&gt;\n        &lt;th&gt;  17:00 &lt;/th&gt;\n        &lt;th&gt;  18:00 &lt;/th&gt;\n        &lt;th&gt;  19:00 &lt;/th&gt;\n        &lt;th&gt;  20:00 &lt;/th&gt;\n        &lt;th&gt;  21:00 &lt;/th&gt;\n        &lt;th&gt;  22:00 &lt;/th&gt;\n        &lt;th  style=\"border-top-right-radius : 20px 20px\" &gt;  23:00&lt;/small&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt; \n        &lt;td&gt;  Pictogramme&lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(0)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(1)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(2)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(3)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(4)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(5)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(6)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(7)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(8)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(9)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(10)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(11)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(12)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(13)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(14)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(15)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(16)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(17)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehour(18)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(19)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(20)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(21)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(22)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodehournight(23)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt; \n        &lt;td HEIGHT=\"50\"&gt;  Température&lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[0])}; font-weight: bold;\" &gt; {degres[0]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[1])};font-weight: bold;\" &gt; {degres[1]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[2])};font-weight: bold;\" &gt; {degres[2]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[3])};font-weight: bold;\" &gt; {degres[3]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[4])};font-weight: bold;\" &gt; {degres[4]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[5])};font-weight: bold;\" &gt; {degres[5]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[6])};font-weight: bold;\" &gt; {degres[6]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[7])};font-weight: bold;\" &gt; {degres[7]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[8])};font-weight: bold;\" &gt; {degres[8]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[9])};font-weight: bold;\" &gt; {degres[9]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[10])};font-weight: bold;\" &gt; {degres[10]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[11])};font-weight: bold;\" &gt; {degres[11]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[12])};font-weight: bold;\" &gt; {degres[12]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[13])};font-weight: bold;\" &gt; {degres[13]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[14])};font-weight: bold;\" &gt; {degres[14]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[15])};font-weight: bold;\" &gt; {degres[15]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[16])};font-weight: bold;\" &gt; {degres[16]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[17])};font-weight: bold;\" &gt; {degres[17]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[18])};font-weight: bold;\" &gt; {degres[18]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[19])};font-weight: bold;\" &gt; {degres[19]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[20])};font-weight: bold;\" &gt; {degres[20]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[21])};font-weight: bold;\" &gt; {degres[21]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[22])};font-weight: bold;\" &gt; {degres[22]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(degres[23])};font-weight: bold;\" &gt; {degres[23]}°C &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt; \n        &lt;td&gt; Vitesse du vent &lt;/td&gt;\n        &lt;td&gt; {vent[0]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[1]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[2]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[3]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[4]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[5]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[6]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[7]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[8]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[9]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[10]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[11]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[12]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[13]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[14]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[15]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[16]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[17]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[18]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[19]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[20]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[21]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[22]}km/h &lt;/td&gt;\n        &lt;td&gt; {vent[23]}km/h &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt; \n        &lt;td style=\"border-bottom-left-radius : 20px 20px\"&gt; Précipitations &lt;/td&gt;\n        &lt;td&gt; {goutte(0)} {pluie[0]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(1)} {pluie[1]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(2)} {pluie[2]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(3)} {pluie[3]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(4)} {pluie[4]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(5)} {pluie[5]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(6)} {pluie[6]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(7)} {pluie[7]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(8)} {pluie[8]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(9)} {pluie[9]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(10)} {pluie[10]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(11)} {pluie[11]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(12)} {pluie[12]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(13)} {pluie[13]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(14)} {pluie[14]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(15)} {pluie[15]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(16)} {pluie[16]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(17)} {pluie[17]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(18)} {pluie[18]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(19)} {pluie[19]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(20)} {pluie[20]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(21)} {pluie[21]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(22)} {pluie[22]}mm &lt;/td&gt;\n        &lt;td style=\"border-bottom-right-radius : 20px 20px\"&gt; {goutte(23)} {pluie[23]}mm &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n\n&lt;/table&gt;\n\"\"\"\ndisplay(HTML(res))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDimanche 5-11\n&lt; Heures\n00:00\n01:00\n02:00\n03:00\n04:00\n05:00\n06:00\n07:00\n08:00\n09:00\n10:00\n11:00\n12:00\n13:00\n14:00\n15:00\n16:00\n17:00\n18:00\n19:00\n20:00\n21:00\n22:00\n23:00\n\n\n\n\nPictogramme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTempérature\n10.4°C\n9.6°C\n8.7°C\n8.8°C\n10.5°C\n11.3°C\n14.2°C\n14.7°C\n15.4°C\n15.9°C\n16.7°C\n17.2°C\n17.6°C\n17.4°C\n17.3°C\n16.8°C\n16.1°C\n15.1°C\n14.1°C\n13.5°C\n13.2°C\n12.6°C\n11.4°C\n10.4°C\n\n\nVitesse du vent\n7.2km/h\n8.8km/h\n10.4km/h\n5.7km/h\n8.9km/h\n9.8km/h\n19.5km/h\n28.8km/h\n31.3km/h\n30.3km/h\n31.1km/h\n22.3km/h\n21.1km/h\n25.7km/h\n20.6km/h\n20.8km/h\n16.3km/h\n13.6km/h\n12.6km/h\n10.8km/h\n14.0km/h\n7.6km/h\n4.6km/h\n6.4km/h\n\n\nPrécipitations\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm\n-\n0.0mm"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Météo Montpellier",
    "section": "",
    "text": "Dérouler le code\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport requests\nimport datetime\nimport pooch\nimport PIL as Image\nimport statistics\nfrom dateutil.relativedelta import relativedelta\n\n#initialisation des dates de debut et fin d'extraction de données\nstart_date = datetime.datetime.now() - relativedelta(days=3)\nend_date = start_date + relativedelta(days=6)\n#formatage des dates pour importer le bon URL\ndebut=\"\"\nif (start_date.month &lt;10 and start_date.day &lt;10):\n    debut = f\"{start_date.year}-0{start_date.month}-0{start_date.day}\"\nelif start_date.day &lt;10:\n    debut = f\"{start_date.year}-{start_date.month}-0{start_date.day}\"\nelif start_date.month &lt;10:\n    debut = f\"{start_date.year}-0{start_date.month}-{start_date.day}\"\nelse:\n    debut = f\"{start_date.year}-{start_date.month}-{start_date.day}\"\n\n\nfin=\"\"\nif (end_date.month &lt;10 and end_date.day &lt;10):\n    fin = f\"{end_date.year}-0{end_date.month}-0{end_date.day}\"\nelif end_date.day &lt;10:\n    fin = f\"{end_date.year}-{end_date.month}-0{end_date.day}\"\nelif start_date.month &lt;10:\n    fin = f\"{end_date.year}-0{end_date.month}-{end_date.day}\"\nelse:\n    fin = f\"{end_date.year}-{end_date.month}-{end_date.day}\"\n\n#copie de l'URL du site open-meteo avec les differents critères qui nous interessent\nurl = f\"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&hourly=temperature_2m,relativehumidity_2m,apparent_temperature,precipitation,rain,snowfall,weathercode,cloudcover,windspeed_10m,windspeed_20m,temperature_20m&daily=weathercode,uv_index_max&timezone=Europe%2FLondon&start_date={debut}&end_date={fin}\"\n\n#récuperation des données\nresponse = requests.get(url)\ndata = response.json()\n\n#initialisation des tableaux de données que nous allons utiliser\ndegres=data['hourly']['temperature_2m']\nressenti=data['hourly']['apparent_temperature']\nhumidite=data['hourly']['relativehumidity_2m']\npluie=data['hourly']['precipitation']\nneige=data['hourly']['snowfall']\nvent=data['hourly']['windspeed_10m']\ncodeimage=data['hourly']['weathercode']\ncodeimagetot=data['daily']['weathercode']\n\n\n#temperatures min et max pour chaques jours (il y avait la possibilité de les obtenir \"daily\" mais j'ai fait ainsi)\ntabdegres = np.zeros((7,24))\n\nk=0\nfor i in range(7):\n    for j in range(24):\n        tabdegres[i,j]= degres[k]\n        k+=1\nmintemp=np.zeros(7)\nmaxtemp=np.zeros(7)\nfor i in range(7):\n    mintemp[i]=min(tabdegres[i])\n    maxtemp[i]=max(tabdegres[i])\n\ntabcode = np.zeros((7,24))\nmedcode=np.zeros(7)\nk=0\nfor i in range(7):\n    for j in range(24):\n        tabcode[i,j]= codeimage[k]\n        k+=1\n\nfor i in range(7): \n    medcode[i]=max(tabcode[i])\n    #medcode[i]=statistics.median(tabcode[i])\n\n#vent moyen pour chaques jours\ntabvent = np.zeros((7,24))\nmoyvent = np.zeros(7)\nk=0\nfor i in range(7):\n    for j in range(24):\n        tabvent[i,j]= vent[k]\n        k+=1\n\nfor i in range(7): \n    moyvent[i]=round(statistics.mean(tabvent[i]),0)#on ne garde pas de chiffres après la virgule car vue générale\n\n#précipitation totale par jours\ntabpluie = np.zeros((7,24))\nsumpluie = np.zeros(7)\nk=0\nfor i in range(7):\n    for j in range(24):\n        tabpluie[i,j]= pluie[k]\n        k+=1\n\nfor i in range(7): \n    sumpluie[i]=round(sum(tabpluie[i]),1)\n\ndef inttoday(i):\n    '''\n    fonction permettant d'obtenir le nom du jour des jours de la semaine automatiquement, correspond à la première ligne du tableau.\n    '''\n    if ((datetime.datetime.now().weekday() + i)%7 ==0):\n        return 'Lundi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==1):\n        return 'Mardi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==2):\n        return 'Mercredi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==3):\n        return 'Jeudi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==4):\n        return 'Vendredi'\n    elif ((datetime.datetime.now().weekday()+i)%7 ==5):\n        return 'Samedi'\n    else:\n        return 'Dimanche'\n\ndef date(i):\n    '''\n    Retourne une chaine de caractères correspondant au jour i, i étant l'offset de jour par rapport au présent.\n    '''\n    date=datetime.datetime.now() + relativedelta(days=i)\n    return f\"{date.day}-{date.month}\"\n\ndef imgcode(i):\n    '''\n    Association de chaque code WBO à un pictogramme le correspondant. Retourne le chemin d'accès au pictogramme par une chaine de caractères. Version hourly.\n    '''\n    if (medcode[i]==0):\n        return 'iconsmeteo/Sun-thin.svg'\n    elif (medcode[i]==1 or medcode[i]==2):\n        return 'iconsmeteo/PartlySunny-thin.svg'\n    elif (medcode[i]==3):\n        return 'iconsmeteo/Cloud-thin.svg'\n    elif (45&lt;=medcode[i]&lt;=57):\n        return 'iconsmeteo/Haze-thin.svg'\n    elif (61&lt;=medcode[i]&lt;=67 or 80&lt;=medcode[i]&lt;=82):\n        return 'iconsmeteo/Rain-thin.svg'\n    elif (71&lt;=medcode[i]&lt;=77 or 85&lt;=medcode[i]&lt;=86):\n        return 'iconsmeteo/Snow-thin.svg'\n    elif (95&lt;=medcode[i]&lt;=99):\n        return 'iconsmeteo/Storm-thin.svg'\n\n\ndef imgcodeday(i):\n    '''\n    Association de chaques codes WBO à un pictogramme le correspondant. Retourne le chemin d'accès au pictogramme par une chaine de caractères. Version daily.\n    '''\n    match codeimagetot[i]:\n        case 0:\n            return 'iconsmeteo/wi-day-sunny.svg'\n        case 1:\n            return 'iconsmeteo/wi-day-sunny-overcast.svg'\n        case 2:\n            return 'iconsmeteo/wi-day-cloudy.svg'\n        case 3:\n            return 'iconsmeteo/wi-cloud.svg'\n        case 45|48:\n            return 'iconsmeteo/wi-fog.svg'\n        case 51 | 53 | 55 | 56 | 57:\n            return 'iconsmeteo/wi-sprinkle.svg'\n        case 61 | 81 | 82:\n            return 'iconsmeteo/wi-showers.svg'\n        case 63:\n            return 'iconsmeteo/wi-rain-wind.svg'\n        case 65 | 66 | 67:\n            return 'iconsmeteo/wi-rain.svg'\n        case 71 | 73 | 75 | 85 | 86:\n            return 'iconsmeteo/wi-snow.svg'\n        case 95 | 96:\n            return 'iconsmeteo/wi-storm-showers.svg'\n        case 99:\n            return 'iconsmeteo/wi-thunderstorm.svg'\n\ndef couleur(temp):\n    '''\n    Associe une couleur en fonction de la température sous le format RGB.\n    '''\n    if (temp&lt;=0):\n        return 'rgb(102, 183, 213,0.5)'\n    if (0&lt;temp&lt;=5):\n        return 'rgb(85, 215, 195,0.5)'\n    if (5&lt;temp&lt;=10):\n        return 'rgb(65, 220, 119,0.5)'\n    if (10&lt;temp&lt;=15):\n        return 'rgb(82, 226, 38,0.5)'\n    if (15&lt;temp&lt;=20):\n        return 'rgb(155, 227, 22,0.5)'\n    if (20&lt;temp&lt;=25):\n        return 'rgb(216, 186, 12,0.5)'\n    if (25&lt;temp&lt;=30):\n        return 'rgb(211, 113, 7,0.5)'\n    if (30&lt;temp&lt;=35):\n        return 'rgb(204, 61, 4,0.5)'\n    if (35&lt;temp):\n        return 'rgb(201, 25, 2,0.5)'\n\ndef goutte(i):\n    '''\n    Retourne une image sous format html correspondant a l'intensité des précipitations.\n    '''\n    if 0 &lt; sumpluie[i] &lt;= 2:\n        return '&lt;img src=\"iconsmeteo/wi-raindrop.svg\" width=\"20\" height=\"20\" /&gt;' \n    elif 2 &lt; sumpluie[i]:\n        return '&lt;img src=\"iconsmeteo/wi-raindrops.svg\" width=\"40\" height=\"40\" /&gt;' \n    else :\n        return ''\n\nfrom IPython.display import Markdown\nfrom IPython.display import HTML\nfrom tabulate import tabulate\n\n#création du tableau en HTML pour pouvoir mettre les images et des couleurs\nres=f\"\"\"\n&lt;table class= \"table1-style\"&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;  \n        &lt;th  style=\"border-top-left-radius : 20px 20px\"&gt; Jours &lt;/th&gt;\n        &lt;th&gt;  {inttoday(-2)} &lt;br&gt; &lt;small&gt; {date(-2)} &lt;/small&gt;&lt;/th&gt;\n        &lt;th&gt;  Hier &lt;br&gt; &lt;small&gt;{date(-1)}&lt;/small&gt;&lt;/th&gt;\n        &lt;th style=\"border-top:3px solid rgb(85, 215, 195,0.5);border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)\"&gt;   Aujourd'hui &lt;a href = plus.qmd style=\"text-decoration:none\"&gt;  &gt; &lt;/a&gt;&lt;br&gt; &lt;small&gt;{date(0)}&lt;/small&gt;&lt;/th&gt;\n        &lt;th&gt;  Demain &lt;br&gt; &lt;small&gt;{date(1)}&lt;/small&gt;&lt;/th&gt;\n        &lt;th&gt;  {inttoday(2)} &lt;br&gt; &lt;small&gt;{date(2)}&lt;/small&gt;&lt;/th&gt;\n        &lt;th&gt;  {inttoday(3)} &lt;br&gt; &lt;small&gt;{date(3)}&lt;/small&gt;&lt;/th&gt;\n        &lt;th  style=\"border-top-right-radius : 20px 20px\" &gt;  {inttoday(4)} &lt;br&gt; &lt;small&gt;{date(4)}&lt;/small&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt; \n        &lt;td&gt;  Pictogramme&lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodeday(0)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodeday(1)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td style=\"border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)\"&gt; &lt;img src={imgcodeday(2)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodeday(3)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodeday(4)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodeday(5)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n        &lt;td&gt; &lt;img src={imgcodeday(6)} width=\"50\"\n  height=\"50\" /&gt; &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt; \n        &lt;td&gt;  Température maximale&lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(maxtemp[0])}; font-weight: bold;\" &gt; {maxtemp[0]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(maxtemp[1])};font-weight: bold;\" &gt; {maxtemp[1]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(maxtemp[2])};font-weight: bold;border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)\" &gt; {maxtemp[2]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(maxtemp[3])};font-weight: bold;\" &gt; {maxtemp[3]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(maxtemp[4])};font-weight: bold;\" &gt; {maxtemp[4]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(maxtemp[5])};font-weight: bold;\" &gt; {maxtemp[5]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(maxtemp[6])};font-weight: bold;\" &gt; {maxtemp[6]}°C &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr &gt; \n        &lt;td&gt;  Température minimale&lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(mintemp[0])};font-weight: bold;\" &gt; {mintemp[0]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(mintemp[1])};font-weight: bold;\" &gt; {mintemp[1]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(mintemp[2])};font-weight: bold;border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)\" &gt; {mintemp[2]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(mintemp[3])};font-weight: bold;\" &gt; {mintemp[3]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(mintemp[4])};font-weight: bold;\" &gt; {mintemp[4]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(mintemp[5])};font-weight: bold;\" &gt; {mintemp[5]}°C &lt;/td&gt;\n        &lt;td style =\" background-color : {couleur(mintemp[6])};font-weight: bold;\" &gt; {mintemp[6]}°C &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt; \n        &lt;td&gt; Vitesse moyenne du vent &lt;/td&gt;\n        &lt;td&gt; {int(moyvent[0])}km/h &lt;/td&gt;\n        &lt;td&gt; {int(moyvent[1])}km/h &lt;/td&gt;\n        &lt;td style=\"border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)\"&gt; {int(moyvent[2])}km/h &lt;/td&gt;\n        &lt;td&gt; {int(moyvent[3])} km/h &lt;/td&gt;\n        &lt;td&gt; {int(moyvent[4])} km/h &lt;/td&gt;\n        &lt;td&gt; {int(moyvent[5])} km/h &lt;/td&gt;\n        &lt;td&gt; {int(moyvent[6])} km/h &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt; \n        &lt;td style=\"border-bottom-left-radius : 20px 20px\"&gt; Précipitations &lt;/td&gt;\n        &lt;td&gt; {goutte(0)} {sumpluie[0]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(1)} {sumpluie[1]}mm &lt;/td&gt;\n        &lt;td style=\"border-bottom:3px solid rgb(85, 215, 195,0.5);border-right:3px solid rgb(85, 215, 195,0.5);border-left:3px solid rgb(85, 215, 195,0.5)\"&gt; {goutte(2)} {sumpluie[2]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(3)} {sumpluie[3]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(4)} {sumpluie[4]}mm &lt;/td&gt;\n        &lt;td&gt; {goutte(5)} {sumpluie[5]}mm &lt;/td&gt;\n        &lt;td style=\"border-bottom-right-radius : 20px 20px\"&gt; {goutte(6)} {sumpluie[6]}mm &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n\n&lt;/table&gt;\n\"\"\"\ndisplay(HTML(res))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJours\nVendredi\n3-11\nHier\n4-11\nAujourd'hui &gt;\n5-11\nDemain\n6-11\nMardi\n7-11\nMercredi\n8-11\nJeudi\n9-11\n\n\n\n\nPictogramme\n\n\n\n\n\n\n\n\n\nTempérature maximale\n16.9°C\n13.8°C\n15.4°C\n17.6°C\n16.6°C\n14.6°C\n15.2°C\n\n\nTempérature minimale\n11.1°C\n8.6°C\n8.4°C\n8.7°C\n8.2°C\n5.4°C\n5.2°C\n\n\nVitesse moyenne du vent\n15km/h\n14km/h\n10km/h\n16 km/h\n9 km/h\n10 km/h\n8 km/h\n\n\nPrécipitations\n 2.1mm\n 2.3mm\n 3.0mm\n0.0mm\n 2.0mm\n0.0mm\n0.0mm"
  }
]